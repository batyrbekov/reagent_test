{"version":3,"sources":["giggin/components/gigs.cljs"],"mappings":"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","names":["giggin.components.gigs/button","reagent.core/adapt-react-class","js/module$node_modules$$material_ui$core$index.Button","giggin.components.gigs/fab","js/module$node_modules$$material_ui$core$index.Fab","giggin.components.gigs/icon","js/module$node_modules$$material_ui$core$index.Icon","giggin.components.gigs/gigs","modal","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","initial-values","values","toggle-modal","p__26016","map__26017","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","active","gig","js/console","cljs_time.core.local_date_time.cljs$core$IFn$_invoke$arity$7","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/reset!","upsert-gig","p__26019","map__26020","id","desc","start-date","end-date","status","timezone","newid","or__4131__auto__","cljs.core/random-uuid","giggin.state/apts","clojure.string/trim","giggin.components.gig-editor/gig-editor","iter__4523__auto__","s__26023","cljs.core/LazySeq","temp__5720__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4521__auto__","size__4522__auto__","cljs.core/count","b__26025","cljs.core/chunk-buffer","i__26024","map__26026","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__26022","cljs.core/chunk-rest","map__26028","cljs.core/first","cljs.core/cons","cljs.core/rest","cljs.core/deref","cljs.core/vals","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/dissoc","cljs.core/chunk-first"],"sourcesContent":["(ns giggin.components.gigs\n  (:require [giggin.state :as state]\n            [giggin.helpers :refer [format-price]]\n            [giggin.components.gig-editor :refer [gig-editor]]\n            [reagent.core :as r]\n            [clojure.string :as str]\n            [\"@material-ui/icons\" :as icons]\n            [\"@material-ui/core\" :as mui]\n            [cljs-time.core :as time]))\n\n(def button (r/adapt-react-class mui/Button))\n(def fab (r/adapt-react-class mui/Fab))\n(def icon (r/adapt-react-class mui/Icon))\n\n\n\n(defn gigs\n  []\n  (let [modal (r/atom {:active false})\n        initial-values {:id nil :desc \"\" :start-date \"\" :end-date \"\" :status \"scheduled\" :timezone \"GMT+0\"}\n        values (r/atom initial-values)\n        toggle-modal (fn\n                       [{:keys [active gig]}]\n                       (.log js/console (:status gig) \", \" (:start-date gig) \",time: \" (time/local-date-time 1986 10 14 4 3 27 456))\n                       (swap! modal assoc :active active)\n                       (reset! values gig))\n        upsert-gig (fn [{:keys [id desc start-date end-date status timezone]}]\n                     \n                     (let [newid (or id (str \"apts-\" (random-uuid)))]\n                       (.log js/console \"upsert id: \" id \", newid:\" newid)\n                       (swap! state/apts assoc newid {:id newid\n                                                      :desc (str/trim desc)\n                                                      :start-date start-date\n                                                      :end-date end-date\n                                                      :status status\n                                                      :timezone timezone}))\n                     (toggle-modal {:active false :gig initial-values}))]\n    (fn\n      []\n      [:main\n       [icon  {:aria-label \"Star\" :color \"primary\"}]\n       [:div\n        [button {:variant \"contained\" :color \"primary\"\n                 :on-click #(toggle-modal {:active true :gig initial-values})} \n         \"Add Appointment\"\n         ]\n        \n        [gig-editor {:modal modal\n                     :values values\n                     :upsert-gig upsert-gig\n                     :toggle-modal toggle-modal\n                     :initial-values initial-values}]\n        \n        [:table.tbl {:border 2}\n         [:thead\n          [:tr \n           [:td \"id\"]\n           [:td \"desc\"]\n           [:td \"start date\"]\n           [:td \"end date\"]\n           [:td \"status\"]\n           [:td \"timezone\"]\n           [:td \"\"]\n           ]]\n         \n         [:tbody\n          (for [{:keys [id desc start-date end-date status timezone] :as gig} (vals @state/apts)]\n            [:tr {:key id}\n             [:td  id]\n             [:td {:on-click #(toggle-modal {:active true\n                                             :gig gig})} desc ]\n             [:td  start-date]\n             [:td  end-date]\n             [:td status]\n             [:td timezone]\n             [:td \n              [button {:color \"secondary\" :variant \"contained\" \n                       :on-click #(do\n                                    (.log js/console \"delete id:\" id)\n                                    (swap! state/apts dissoc id))\n                       } \"Delete\"]]])]]\n        \n        \n        ]])))\n\n\n"]}